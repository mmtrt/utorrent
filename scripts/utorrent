#!/usr/bin/env bash
#
# Author:
#   mmtrt [Taqi Raza]
#
# Description:
#   notepad3 wrapper for snap
#
# Date: Feb 14 2018
#

# wine-platform dir on snap
WP=$SNAP/wine-platform
# wine release
REL=stable
# wine base
WINE_BASE=wine-$REL

if [ ! -d $WP/usr ] ; then
  echo "You need to connect this snap to the wine-platform-i386 snap."
  echo ""
  echo "snap connect $SNAP_NAME:wine-platform-plug wine-platform-i386:wine-base-$REL"
  exit 1
fi

needs_update=true

. $SNAP_USER_DATA/.last_revision 2>/dev/null || true
if [ "$SNAP_DESKTOP_LAST_REVISION" = "$SNAP_REVISION" ]; then
  needs_update=false
fi

# Set $REALHOME to the users real home directory
REALHOME=`getent passwd $UID | cut -d ':' -f 6`

function prepend_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\$dir\${$var:+:\$$var}\""
  fi
}

function append_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\${$var:+\$$var:}\$dir\""
  fi
}

# On Fedora $SNAP is under /var and there is some magic to map it to /snap.
# # We need to handle that case and reset $SNAP
SNAP=`echo $SNAP | sed -e "s|/var/lib/snapd||g"`

export GTK_MODULES=""
export WINEARCH="win32"

if [ "${WINEARCH}" == "win32" ]; then
  ARCH="i386-linux-gnu"
else
  ARCH="x86_64-linux-gnu"
fi

export WINEVERPATH=$WP/$WINE_BASE
export WINESERVER=$WP/$WINE_BASE/bin/wineserver
export WINELOADER=$WP/$WINE_BASE/bin/wine
export WINEDLLPATH=$WP/$WINE_BASE/lib/wine/fakedlls
export WINETRICKS=$WP/bin/winetricks
export WINEPREFIX=$SNAP_USER_COMMON/.wine
export WINEDLLOVERRIDES="mscoree,mshtml="
export WINEDEBUG=-all
export LD_LIBRARY_PATH="$WP/lib:$WP/lib/$ARCH:$WP/usr/lib:$WP/usr/lib/$ARCH:$LD_LIBRARY_PATH"
export PATH=$PATH:$WP/bin:$WP/usr/bin:$WP/$WINE_BASE/bin

# XKB config
export XKB_CONFIG_ROOT=$WP/usr/share/X11/xkb

# Give XOpenIM a chance to locate locale data.
# This is required for text input to work in SDL2 games.
export XLOCALEDIR=$WP/usr/share/X11/locale
export LOCPATH=$WP/usr/lib/locale

# Set XCursors path
export XCURSOR_PATH=$WP/usr/share/icons

# SAMBA Libs for ntlm_auth to function
append_dir LD_LIBRARY_PATH $WP/usr/lib/$ARCH/samba

# Mesa Libs for OpenGL support
append_dir LD_LIBRARY_PATH $WP/usr/lib/$ARCH/mesa
append_dir LD_LIBRARY_PATH $WP/usr/lib/$ARCH/mesa-egl

# Tell libGL where to find the drivers
export LIBGL_DRIVERS_PATH=$WP/usr/lib/$ARCH/dri
append_dir LD_LIBRARY_PATH $LIBGL_DRIVERS_PATH

# Workaround in snapd for proprietary nVidia drivers mounts the drivers in
# /var/lib/snapd/lib/gl that needs to be in LD_LIBRARY_PATH
# Without that OpenGL using apps do not work with the nVidia drivers.
# Ref.: https://bugs.launchpad.net/snappy/+bug/1588192
append_dir LD_LIBRARY_PATH /var/lib/snapd/lib/gl

# Pulseaudio export
append_dir LD_LIBRARY_PATH $WP/usr/lib/$ARCH/pulseaudio

# EGL vendor files on glvnd enabled systems
[ -d /var/lib/snapd/lib/glvnd/egl_vendor.d ] && \
append_dir __EGL_VENDOR_LIBRARY_DIRS /var/lib/snapd/lib/glvnd/egl_vendor.d

# Tell GStreamer where to find its plugins
export GST_PLUGIN_PATH=$WP/usr/lib/$ARCH/gstreamer-1.0
export GST_PLUGIN_SYSTEM_PATH=$WP/usr/lib/$ARCH/gstreamer-1.0
# gst plugin scanner doesn't install in the correct path: https://github.com/ubuntu/snapcraft-desktop-helpers/issues/43
export GST_PLUGIN_SCANNER=$WP/usr/lib/$ARCH/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner

# XDG Config
prepend_dir XDG_CONFIG_DIRS $WP/etc/xdg

# Define snaps' own data dir
prepend_dir XDG_DATA_DIRS $WP/usr/share
prepend_dir XDG_DATA_DIRS $SNAP_USER_COMMON
prepend_dir XDG_DATA_DIRS $SNAP_USER_DATA

export HOME=$SNAP_USER_COMMON

# Set XDG_DATA_HOME to local path
export XDG_DATA_HOME=$SNAP_USER_COMMON/.local/share
mkdir -p $XDG_DATA_HOME

# Workaround for GLib < 2.53.2 not searching for schemas in $XDG_DATA_HOME:
#   https://bugzilla.gnome.org/show_bug.cgi?id=741335
prepend_dir XDG_DATA_DIRS $XDG_DATA_HOME

# Set cache folder to local path
export XDG_CACHE_HOME=$SNAP_USER_COMMON/.cache
mkdir -p $XDG_CACHE_HOME

# Set config folder to local path
export XDG_CONFIG_HOME=$SNAP_USER_COMMON/.config
mkdir -p $XDG_CONFIG_HOME

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1656340 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p $XDG_RUNTIME_DIR -m 700

# Make PulseAudio socket available inside the snap-specific $XDG_RUNTIME_DIR
if [ -n "$XDG_RUNTIME_DIR" ]; then
    pulsenative="pulse/native"
    pulseaudio_sockpath="$XDG_RUNTIME_DIR/../$pulsenative"
    if [ -S "$pulseaudio_sockpath" ]; then
        export PULSE_SERVER="unix:${pulseaudio_sockpath}"
    fi
fi

# Keep an array of data dirs, for looping through them
IFS=':' read -r -a data_dirs_array <<< "$XDG_DATA_DIRS"

# Font Config
export FONTCONFIG_PATH=$WP/etc/fonts/conf.d
export FONTCONFIG_FILE=$XDG_CONFIG_HOME/fontconfig/fonts.conf

function make_user_fontconfig {
  echo "<fontconfig>"
  if [ -d $REALHOME/.local/share/fonts ]; then
    echo "  <dir>$REALHOME/.local/share/fonts</dir>"
  fi
  if [ -d $REALHOME/.fonts ]; then
    echo "  <dir>$REALHOME/.fonts</dir>"
  fi
  for ((i = 0; i < ${#data_dirs_array[@]}; i++)); do
    if [ -d "${data_dirs_array[$i]}/fonts" ]; then
      echo "  <dir>${data_dirs_array[$i]}/fonts</dir>"
    fi
  done
  echo '  <include ignore_missing="yes">conf.d</include>'
  # We need to include this default cachedir first so that caching
  # works: without it, fontconfig will try to write to the real user home
  # cachedir and be blocked by AppArmor.
  echo '  <cachedir prefix="xdg">fontconfig</cachedir>'
  if [ -d $REALHOME/.cache/fontconfig ]; then
    echo "  <cachedir>$REALHOME/.cache/fontconfig</cachedir>"
  fi
  echo "</fontconfig>"
}

if [ $needs_update = true ]; then
  rm -rf $XDG_DATA_HOME/{fontconfig,fonts,fonts-*,themes,.themes}
  mkdir -p $XDG_CONFIG_HOME/fontconfig
  make_user_fontconfig > $XDG_CONFIG_HOME/fontconfig/fonts.conf
fi

# Gdk-pixbuf loaders
export GDK_PIXBUF_MODULE_FILE=$XDG_CACHE_HOME/gdk-pixbuf-loaders.cache
export GDK_PIXBUF_MODULEDIR=$WP/usr/lib/$ARCH/gdk-pixbuf-2.0/2.10.0/loaders
if [ -f $WP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders ] && [ ! -f "${GDK_PIXBUF_MODULE_FILE}" ]; then
  $WP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders > $GDK_PIXBUF_MODULE_FILE
fi

# utorrent env
progName=utorrent
progRealPath=$SNAP/usr/share/$progName
progHome=$SNAP_USER_DATA/$progName
progBin=$progName.exe

if [ ! -d $progHome ];then
mkdir -p $progHome
for dt in settings.dat settings.dat.new settings.dat.old dht.dat dht.dat.new dht.dat.old dht_feed.dat dht_feed.dat.new dht_feed.dat.old updates.dat updates.dat.new updates.dat.old rss.dat rss.dat.new rss.dat.old resume.dat resume.dat.new resume.dat.old
do
touch $progHome/$dt
done
fi

# Delete broken symlinks
find "$progHome/" -type l -delete &> /dev/null
# Update existing symlinks, add new symlinks
cp -urs "$progRealPath/"* "$progHome" &> /dev/null

[ $needs_update = true ] && echo "SNAP_DESKTOP_LAST_REVISION=$SNAP_REVISION" > $SNAP_USER_DATA/.last_revision

# Add torrent(s)/magnet link(s)
for i; do # for i = for i in "$@"
    # Add path in Wine form (e.g. "z:/home/user/Desktop/lol.torrent")
    if [[ -f /${i#?:} ]]; then 
        torrents+=("z:${i#?:}")   # When opened through .desktop or Wine path (e.g. z:/*)
    elif [[ $i != magnet:* ]]; then
        torrents+=("z:$(pwd)/$i") # When path only partial or in current directory
    else    # Magnet links
        torrents+=("$i")
    fi
done

if [ -z "$1" ] ; then
  wine "$progHome/$progBin"
else
  wine start /unix "$progHome/$progBin" "${torrents[@]}"
fi
